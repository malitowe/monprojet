<?php/* * This file is part of the FOSUserBundle package. * * (c) FriendsOfSymfony <http://friendsofsymfony.github.com/> * * For the full copyright and license information, please view the LICENSE * file that was distributed with this source code. */namespace App\Controller\Security;use Symfony\Bundle\FrameworkBundle\Controller\Controller;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;use Symfony\Component\EventDispatcher\EventDispatcherInterface;use Symfony\Component\HttpFoundation\RedirectResponse;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\HttpFoundation\Response;use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;use Symfony\Component\Routing\Generator\UrlGeneratorInterface;use Symfony\Component\Security\Core\Encoder\UserPasswordEncoder;use App\Entity\Administrator;use App\Util\TokenGenerator;use Symfony\Component\Security\Core\User\UserInterface;use Symfony\Component\Security\Csrf\TokenGenerator\TokenGeneratorInterface;use Symfony\Component\Translation\TranslatorInterface;class ResettingController extends Controller{    /**	* @Method({"GET"})	* @Route("/gestion/resetting/password", name="admin_resetting_request")    * @Template("admin/security/resetting/request.html.twig")	*/    public function requestAction()    {//        throw new \RuntimeException('You must configure the check path to be handled by the firewall using form_login in your security firewall configuration.');    }    /**     * Request reset user password: submit form and send email.     *     * @param Request $request     *     * @return Response     * @Method({"POST"})     * @Route("/gestion/resetting/sendmail", name="admin_resetting_send_email")     */    public function sendEmailAction(Request $request, \Twig\Environment $twig)    {         $username = $request->request->get('username');         /** @var $user UserInterface */         $admin = $this->getDoctrine()->getRepository(Administrator::class)->findUserByUsernameOrEmail($username);         if (null !== $admin) {            if (!$admin->getConfirmationToken()) {                /** @var $tokenGenerator TokenGeneratorInterface */                $tokenGenerator = new TokenGenerator();                $admin->setConfirmationToken($tokenGenerator->generateToken());            }            $url = $this->generateUrl('user_resetting_reset', array('token' => $admin->getConfirmationToken()), UrlGeneratorInterface::ABSOLUTE_URL);             $context = array(                'user' => $admin,                'confirmationUrl' => $url,            );            $template = $twig->load('admin/security/resetting/email.txt.twig');            $subject = $template->renderBlock('subject', $context);            $textBody = $template->renderBlock('body_text', $context);            $htmlBody = '';            $fromEmail = 'contact@rectoversoath.be';            if ($template->hasBlock('body_html', $context)) {                $htmlBody = $template->renderBlock('body_html', $context);//                $htmlBody = nl2br($htmlBody);            }            $message =  (new \Swift_Message('Email de Reinitialisation'))                ->setSubject($subject)                ->setFrom($fromEmail, 'Recto Verso (Ath)')                ->setReplyTo('contact@rectoversoath.be', 'Contact')                ->setTo($admin->getEmail());            $context['titre'] = $subject;            $context['contenu_mail'] = $htmlBody ?? $textBody;            $message->setBody(                $this->renderView('mail/default.html.twig', $context),                'text/html'            );            $mailer = $this->get('mailer');            $mailer->send($message);            $admin->setPasswordRequestedAt(new \DateTime());            $em = $this->getDoctrine()->getManager();            $em->persist($admin);            $em->flush();            //$this->getDoctrine()->getRepository(Administrator::class)->updateUser($admin);        }        return new RedirectResponse($this->generateUrl('admin_resetting_check_email', array('username' => $username)));    }    /**     * Tell the user to check his email provider.     *     * @param Request $request     *     * @return Response     * @Method({"GET"})     * @Route("/gestion/resetting/checkmail", name="admin_resetting_check_email")     * @Template("admin/security/resetting/check_email.html.twig")     */    public function checkEmailAction(Request $request)    {        $username = $request->query->get('username');        if (empty($username)) {            // the user does not come from the sendEmail action            return new RedirectResponse($this->generateUrl('admin_resetting_request'));        }        return array(            'tokenLifetime' => ceil(86400 / 3600),        );    }    /**     * Reset user password.     *     * @param Request $request     * @param string  $token     * @return Response     * @Method({"GET", "POST"})     * @Route("/gestion/reset/{token}", name="user_resetting_reset")     * @Template("admin/security/resetting/reset.html.twig")     */    public function resetAction(Request $request, TranslatorInterface $translator, $token)    {        $userManager = $this->getDoctrine()->getRepository(User::class);        $user = $userManager->findUserByConfirmationToken($token);        if (null === $user) {            $this->addFlash(                'error', sprintf('The user with "confirmation token" does not exist for value "%s"', $token)            );        }        $params = $request->request->all();        if (array_key_exists("_password", $params)) {            if($params['_password'] != $params['_confirm_password']) {                $this->addFlash(                    'error', $translator->trans('The passwords you entered are not valid!')                );            } else {                $user->setConfirmationToken(null);                $user->setPassword($this->container->get("security.password_encoder")->encodePassword($user, $params['_password']));                $userManager->updateUser($user);                $url = $this->generateUrl('adminlogin');                $this->addFlash(                    'success', $translator->trans('Your password has been successfully reset! Please log in now.')                );                $response = new RedirectResponse($url);                return $response;            }        }        return array(            'token' => $token,        );    }}